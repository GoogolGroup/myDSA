450 questions- https://drive.google.com/file/d/1FMdN_OCfOI0iAeDlqswCiC2DZzD4nPsb/view
frequent asked quetions-https://docs.google.com/spreadsheets/d/1k6hcdNsmBPxSPqaqmUpRKqBjax1-miMaRRKcbscL3ow/edit#gid=0
https://zhenchaogan.gitbook.io/leetcode-solution/leetcode-1-two-sum
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Reverse of string/ array/ number:-
var a = [1,2,3,4,5];
   a.reverse();
   document.write(a);
------------------------------------
 function customReverse(originalArray) {
  let leftIndex = 0;
  let rightIndex = originalArray.length - 1;

  while (leftIndex < rightIndex) {
    let temp = originalArray[leftIndex];
    originalArray[leftIndex] = originalArray[rightIndex];
    originalArray[rightIndex] = temp;
    leftIndex++;
    rightIndex--;
  }
}
let myArray = [1, 2, 3, 4, 5];
customReverse(myArray);
console.log(myArray);
-------------------------------------
let numbers = [1, 2, 3, 5];
let reversedNumbers = [];
for(let i = numbers.length -1; i >= 0; i--) {
  reversedNumbers.push(numbers[i]);
}
console.log(reversedNumbers);
-----------------------------------
  var t = [];
  var a = [1,2,5];
  for(var i = 0; i < a.length;i++){
   t[i] = a[a.length-1-i]
  }
  console.log(t)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find Minimum and Maximum Values in an Array:-(“[The spread] operator causes the values in the array to be expanded, or ‘spread,’ into the function’s arguments.”)
Math.min(1,3,5) // 1
Math.min([1,3,5]) // NaN
// Using the spread operator
Math.min(...[1,3,5]) // 1
Math.max(...[1,3,5]) // 5
---------------------------------
// Using Function.prototype.apply() instead of the spread operator
Math.min.apply(null, [1,3,5]) // 1(first argument to .apply() is the target for this, which in this case does not matter, so I passed in null as the first argument.)
Math.max.apply(null, [1,3,5]) // 5
----------------------------------
const arr = [1,3,53];
let minValue = arr[0]; let maxValue = arr[0];
for(var i = 1; i < arr.length; i++){
    if(arr[i] < minValue){ //3<1 //53<0
        minValue = arr[i];
    }
    if(arr[i] > maxValue){ //3>1 //53>0
        maxValue = arr[i]; //3 //53
     }
}
console.log(minValue);
console.log(maxValue); 
---------------------------
let arrayOfNumbers = [4, 12, 62, 70, -10];
console.log("Max: " + Math.max.apply(Math, arrayOfNumbers));
// output ==> Max: 70
console.log("Min: " + Math.min.apply(Math, arrayOfNumbers));
// output ==> Min: -10
----------------------------
var arr = [ 3, 8, 7, 6, 5, -4, 31, 2, 21, 20, 1 ].sort(function(a, b) { return a - b }),  // [-4, 1, 2, 3, 5, 6, 7, 8, 20, 21, 31]
    min = arr[0],  // min
    max = arr[arr.length-1];  //max
console.log(min, max);
-----------------------------
let arrayList = [1, 2, 3, 4, 3, 20, 0];
let maxNum = arrayList.reduce((prev, current) => {
  return Math.max(prev, current)
});
let minNum = arrayList.reduce((prev, current) => {
  return Math.min(prev, current)
});
console.log(minNum);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To find kth mini and max from an array:-
var numbers = [1,4,3,5,6,2];
var sorted = numbers.sort(function(a, b) { return a - b });
var smallest = sorted[0], secondSmallest = sorted[1], thirdSmallest = sorted[2],
    largest  = sorted[sorted.length - 1], secondLargest = sorted[sorted.length - 2], thirdLargest = sorted[sorted.length - 3];
console.log('Smallest: ' + smallest);
console.log('Second Smallest: ' + secondSmallest);
console.log('Third Smallest: ' + thirdSmallest);
console.log('Third Largest: ' + thirdLargest);
console.log('Second Largest: ' + secondLargest);
console.log('Largest: ' + largest);
-------------------------------
function kthSmallest(arr, k){
    arr.sort((a,b) => a-b);
    return arr[k - 1];
}
console.log(kthSmallest([ 1,2,3,4,5,6,7,8,9,10], 3));
function kthLargest(arr, k){
    arr.sort((a,b) => a-b);
    return arr[arr.length - k];
}
console.log(kthLargest([ 1,2,3,4,5,6,7,8,9,10], 3));
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an array A[] consisting 0s, 1s and 2s, write a function that sorts A[]. The functions should put all 0s first, then all 1s and all 2s in last.
	function sort012(arr)
	{
		let count0 = 0, count1 = 0, count2 = 0;
		for (let i = 0; i < arr.length; i++) {
			if (arr[i] == 0) count0++;
			if (arr[i] == 1) count1++;
			if (arr[i] == 2) count2++;
		}
		for (let i = 0; i < count0; i++)	arr[i] = 0; 
		for (let i = count0; i <(count0 + count1); i++) arr[i] = 1;
		for (let i = (count0 + count1); i < arr.length; i++)	arr[i] = 2;
    
		for (let i = 0; i < arr.length; i++)	console.log(arr[i] + " ");
	}
sort012([ 0,1, 1,0, 1, 2 ]);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Move all negative numbers to beginning and positive to end with constant extra space;-
Algorithm===>
Set the j to 0.
Traversing the array from 0 to n(exclusively, where n is array’s length).
Check if any element of an array is less than the 0,
Check if i should not be equal to j,
Swap the values of indexes arr[i] and arr[j], and increase the value of j.
Print the array.
-----------
function rearrange(arr){
    for (let i = 0, j = 0; i < arr.length; i++) 
    {
        if (arr[i] < 0) { //-1 //2 //-3 //4 //5
            if (i != j)
            { //0,0 //not // 2,1 // not,2 //
                let temp = arr[i]; //-3
                arr[i] = arr[j];
                arr[j] = temp; //arr[1]=-3 //
            }
        j++;
        }
    }
    for (let i = 0; i < arr.length; i++) document.write(arr[i] + " ");
}
rearrange([ -1, 2, -3, 4, -5, 6, -7, 8, 9 ]); //-1 -3 -5 -7 2 6 4 8 9
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To find union and intersection of the 2 sorted arrays:-
var a = [34, 35, 45, 48, 49];
var b = [48, 55];
var union = [...new Set([...a, ...b])];
console.log(union);
------------------------------
function union(a, b) {
    return a.concat(b.filter(function(el) {
        return a.indexOf(el) === -1;
    }));
}
console.log(union([1,2,3,4,5],[2,3,4,5,6,7,9]))
-------------------------------------
const arr1 = [1,2,3,4];
const arr2 = [1,2,5,6];
const intersection = arr1.filter(value=>arr2.includes(value));
console.log(intersection); // [1,2] //duplicate

const arr3 = [1,2,3,4];
const arr4 = [1,2,5,6];
const array3 = arr3.filter(value=>!arr4.includes(value));
const array4 = arr4.filter(value=>!arr3.includes(value));
console.log(array3.concat(array4)) //[3,4,5,6] //unique
-----------------------------------
const yourArray = [1,2,2,3,3,3,4,4,4,4]
let duplicates = []
const tempArray = [...yourArray].sort()
for (let i = 0; i < tempArray.length; i++) {
  if (tempArray[i + 1] === tempArray[i]) {
    duplicates.push(tempArray[i]) //all the times of each duplicates //[2,3,3,4,4,4] 
  }
}
console.log(duplicates) 
----------------------------------
function printUnion( arr1,  arr2)
    {var i = 0, j = 0;
        while (i < arr1.length && j < arr2.length) { //5-0,1,2,3,4
            if (arr1[i] < arr2[j])
                document.write(arr1[i++] + " ");
            else if (arr2[j] < arr1[i])
                document.write(arr2[j++] + " ");
            else {
                document.write(arr2[j++] + " ");
                i++;
            }
        }
       while (i < arr1.length)
            document.write(arr1[i++] + " ");
        while (j < arr2.length)
            document.write(arr2[j++] + " ");
    }
  printUnion([ 1, 2, 4, 5, 6 ], [ 1, 2, 3, 5, 7 ]);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Program to cyclically rotate an array by one:-
function rotate(arr)
{
  var x = arr[arr.length-1], i;
  for(i = arr.length-1; i > 0; i--) arr[i] = arr[i-1];
  arr[0] = x;   
}

let arr = [1, 2, 3, 4, 5];
rotate(arr);
  
for(var i = 0; i < arr.length; i++) document.write(arr[i] + " "); //5 1 2 3 4
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Maximum Sum Subarray Problem (Kadane’s Algorithm) : https://dev.to/cleancodestudio/kadane-s-algorithm-maximum-sum-subarray-problem-2nhp
function maxSubArraySum(nums) {
  let maxCurrent = nums[0];
  let maxGlobal = nums[0];
  for (let i = 1; i < nums.length; i++) {
    maxCurrent = Math.max(nums[i], maxCurrent + nums[i]);
    if (maxCurrent > maxGlobal) {
      maxGlobal = maxCurrent;
    }
  }
  return maxGlobal
}
let a = [-2, -3, 4, -1, -2, 1, 5, -3];
let n = a.length; 
document.write("Maximum contiguous sum is ",maxSubArraySum(a, n));
------------------------------------------------------
function maxSubArraySum(a,size)
{
  let max_so_far = a[0];
  let curr_max = a[0];
  for (let i = 1; i < size; i++)
  {
      curr_max = Math.max(a[i], curr_max+a[i]);
      max_so_far = Math.max(max_so_far, curr_max);
      console.log(curr_max, max_so_far, a[i]); //max_so_far
  }
 return max_so_far;
}
let a = [-2, -3, 4, -1, -2, 1, 5, -3];
let n = a.length; 
document.write("Maximum contiguous sum is ",maxSubArraySum(a, n));
-----------------------------------------------------
function maxSubArraySum(a , size) {
        var max_so_far = 0, max_ending_here = 0, start = 0, end = 0, s = 0;
        for (i = 0; i < size; i++) {
            max_ending_here = a[i]+max_ending_here;
            if (max_so_far < max_ending_here) { //0<-2 
                max_so_far = max_ending_here;
                start = s;
                end = i;
            }
            if (max_ending_here < 0) {
                max_ending_here = 0;
                s = i + 1;
            }
        }
        document.write("Maximum contiguous sum is " + max_so_far);
        document.write("<br/>Starting index " + start);
        document.write("<br/>Ending index " + end);
    }
        var a = [ -2, -3, 4, -1, -2, 1, 5, -3 ];
        var n = a.length;
        maxSubArraySum(a, n);
-----------------------------------------------
Given an array arr[] denoting heights of N towers and a positive integer K, you have to modify the height of each tower either by increasing or decreasing them by K only once. After modifying, height should be a non-negative integer.
Find out what could be the possible minimum difference of the height of shortest and longest towers after you have modified each tower.
Expected Time Complexity: O(N*logN)
Expected Auxiliary Space: O(N)
Input:
K = 2, N = 4
Arr[] = {1, 5, 8, 10}
Output:
5
Explanation:
The array can be modified as
{3, 3, 6, 8}. The difference between
the largest and the smallest is 8-3 = 5.
---
function getMinDiff(arr, n, k) {
    var result = arr[n - 1] - arr[0];     
    for (var i = 1; i < arr.length; i++) 
    {
    min = Math.min(arr[0] + k, arr[i] - k); 
    max = Math.max(arr[i - 1] + k, arr[n - 1] - k); 
    console.log(max, min)
    result = Math.min(result, max-min); 
    }
    return result;
}
console.log( getMinDiff([1, 5, 8, 10], 4, 2))
--------------------------------------
Given an array of N integers arr[] where each element represents the max number of steps that can be made forward from that element. Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.
Note: Return -1 if you can't reach the end of the array.
https://www.youtube.com/watch?v=muDPTDrpS28

function jumpPossible(arr){
  var reachable = 0;
  for(var i=0; i<arr.length; i++){
    if(reachable < i) return false;
    reachable = Math.max(reachable, i+ arr[i]);
    console.log(reachable)
  }
  return true;
}
console.log(jumpPossible([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]))
----------------------------------------
https://www.youtube.com/watch?v=bRcVdrkl0hA
function jumpPossible(arr){
  if(arr.length ==0 || arr.length ==1) return 0;
  if(arr[0]==0) return -1;
  
  var maxReach = arr[0], //initial value
  var steps = arr[0], //initial value
  var jumps =0;
  
  for(var i=0; i<arr.length-1; i++){
   steps--;
    maxReach = Math.max(maxReach, arr[i]+i); //arr[i]+i means index plus element at that index
    if(steps == 0){ //if steps is zero then increase the jump AND steps will be change 
      jumps++;
      steps = maxReach -i;
      if (steps <= 0) return -1; //if 0 present in between of the array of an elements 
    }
  }
  return jumps+1; // 1 added becoz at first move we didn't counted
}
console.log(jumpPossible([3,4,2,1,2,3]))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
function oneDuplicate(array){
 let arr = array.sort(); 
 for(var i=0; i<arr.length-1; i++){
 if(arr[i]==arr[i+1]){
   return arr[i]
 }
}
}
console.log(oneDuplicate([3,4,2,1,2]))
------------------------
function oneDuplicate(array){
    let obj = {}
    for(let num of array){
        if(obj[num]){
            return num; //duplicate
        }else{
            obj[num] = 1;
        }
    }
    console.log(obj)
}
console.log(oneDuplicate([3,4,2,1,2]))
---------------------
Given two sorted arrays arr1[] of size N and arr2[] of size M. Each array is sorted in non-decreasing order. Merge the two arrays into one sorted array in 
non-decreasing order without using any extra space.
var arr1 =  [1, 4 ]; var arr2 =[2, 3 ];
function merge(m , n) { //2,2
        var i = 0; //1 
        var temp = 0; 
    // While loop till last element of array 1(sorted)is greater than first element of array 2(sorted)
        while (arr1[m - 1] > arr2[0]) { //4>2
            if (arr1[i] > arr2[0]) { //1>2 //4>2
                // Swap arr1[i] with first element of arr2 and 
                // sorting the updated arr2(arr1 is already sorted)
                // swap(arr1[i],arr2[0]);
                temp = arr1[i]; //1
                arr1[i] = arr2[0]; //2
                arr2[0] = temp;
                arr2.sort((a,b)=>a-b);
            }
            i++;
        }
    }
merge(arr1.length, arr2.length); 
        document.write("After Merging <br\>First Array: ");
        document.write(arr1.toString());
        document.write("<br\>Second Array:  ");
        document.write(arr2.toString());
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Kadane's Algorithm:- Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.
function sumSubArray(arr){ 
     var maxi=arr[0]; //1 //2//5
     var cursum=arr[0]; //1 //2 //3 //1
     for(var i=1;i<arr.length;i++) //1,2,3,4
        {
            if(cursum<0) cursum=0; //1<0 //2<0 //3<0 //4<0
            cursum=cursum+arr[i]; //2=0+2 //5=2+3 //1=3+-2 // 6=1+5
            maxi=Math.max(maxi,cursum); //2=1,2 //5=2,5 // 5=1,5 //6,1
        }
    return maxi;
}
console.log(sumSubArray([1,2,3,-2,5])) //9
----------------------------------
function sumSubArray(arr){ 
      let max = arr[0];
      let sum = 0;

        for(let i=0; i<arr.length; i++) {
            sum += arr[i];
            if (sum > max) {
                max = sum;
            }
            if (sum < 0 ) {
                sum = 0;
            }
        }
        return max;
}
console.log(sumSubArray([ -1,-2,-3,-4])) //-1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover 
all the intervals in the input.
Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
-------
https://www.youtube.com/watch?v=LvygwImtvEw
 function merge(intervals) {  
    intervals.sort((a,b) => a[0] - b[0]);
    let result = [intervals[0]];    
    for (let interval of intervals ) { 
     let e1 = result[result.length-1][1];
     let s2 = interval[0];
     let e2 = interval[1];
     if(e1>=s2){
      result[result.length-1][1] = Math.max(e1,e2);
     } else {
       result.push(interval)
      }
    }
    return result;
  };
  console.log(merge([[1,3],[2,6],[8,10],[15,18]]))
-------------------------------------------
function merge(intervals) {  
    intervals.sort((a,b) => a[0] - b[0]); document.write(intervals +"<hr/>");
    let results = [[intervals[0][0], intervals[0][1]]];  document.write(results +"<hr/>");
    
    for (let i = 1; i < intervals.length; i++) { //1,2,3
      if (intervals[i][0] <= results[results.length-1][1]) { 2<6
        results[results.length-1][1] = Math.max(results[results.length-1][1], intervals[i][1]) // 6,6
      } else {
       results.push(intervals[i])
      }
    }
    return results;
  };
  console.log(merge([[1,3],[2,6],[8,10],[15,18]]))
  --------------------------------------------------
  function merge(intervals) {
  if(intervals.length <= 1) return intervals; //// test if there are at least 2 intervals
  var result = []; var top   = null;
  intervals = intervals.sort(function(a, b) {return a[0] - b[0]});
  result.push(intervals[0]); //document.write(result) //// push the 1st interval into the result

  // start from the next interval and merge if needed
  for (var i = 1; i < intervals.length; i++) 
  {
    // get the top element
    top = result[result.length - 1];  
    // if the current interval doesn't overlap with the 
    // result top element, push it to the result
    if (top[1] < intervals[i][0]) {
      result.push(intervals[i]);
    }
    // otherwise update the end value of the top element
    // if end of current interval is higher
    else if (top[1] < intervals[i][1])
    {
      top[1] = intervals[i][1];
      result.pop();
      result.push(top);
    }
  }
  return result;
}
console.log(merge([[1,3],[2,6],[8,10],[15,18]]))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Next Permutation:-Implement the next permutation, which rearranges the list of numbers into Lexicographically next greater permutation of list of numbers. 
If such arrangement is not possible, it must be rearranged to the lowest possible order i.e. sorted in an ascending order. You are given an list of numbers arr[ ] of size N.
https://www.youtube.com/watch?v=IhsUbEMfIbY
var nextPermutation = function(nums) {  
    let index = -1; //  // Index of the first element that is smaller than the element to its right.
    for (let i = nums.length - 1; i > 0; i--) { //2,1 //Loop from right to left
        if (nums[i] > nums[i - 1]) { //3>2 //2>1
            index = i - 1; //1=2-1 //0=1-1
            break;
        }
    }    
    if (index === -1) {
        reverse(nums, 0, nums.length - 1);
        return nums;
    }
    let j = nums.length - 1; // Again swap from right to left to find first element that is greater than the above find element
    for (let i = nums.length - 1; i >= index + 1; i--) {
        if (nums[i] > nums[index]) {
            j = i;
            break;
        }
    }
    swap(nums, index, j);
    reverse(nums, index + 1, nums.length - 1);
    return nums;
};

const reverse = (nums, i, j) => {
    while (i < j) {
        swap(nums, i, j);
        i++;
        j--;
    }
};

const swap = (nums, i, index) => {
    const temp = nums[index];
    nums[index] = nums[i];
    nums[i] = temp;
};
console.log(nextPermutation([1, 2, 3]))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the Inversion Count in the array. Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. 
If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
https://www.youtube.com/watch?v=k9RQh21KrH8&t=119s
var countInversion = function(arr) {  
 let count=0;
 for(var i=0; i<arr.length; i++){
   for(var j= i+1; j<arr.length; j++){
     if(arr[i]>arr[j]){ document.write(arr[i], arr[j] + " ")
       count++;
     }
   }
 }
 return count;
}
console.log(countInversion([2, 4, 1, 3, 5])) //3
-----------------------------------------
 function mergeAndCount(arr,l,m,r){   
        // Left subarray
        let left = [];
        for(let i = l; i < m + 1; i++)
        {
            left.push(arr[i]);
            
        }
        
        // Right subarray
        let right = [];
        for(let i = m + 1; i < r + 1; i++)
        {
            right.push(arr[i]);
        }
        let i = 0, j = 0, k = l, swaps = 0;
        while (i < left.length && j < right.length)
        {
            if (left[i] <= right[j])
            {
                arr[k++] = left[i++];
            }
            else
            {
                arr[k++] = right[j++];
                swaps += (m + 1) - (l + i);
            }
        }
        while (i < left.length)
        {
            arr[k++] = left[i++];
        }
        while (j < right.length)
        {
            arr[k++] = right[j++];
        }
        return swaps;
}
    
    // Merge sort function
 function mergeSortAndCount(arr, l, r){      
        // Keeps track of the inversion count at a
        // particular node of the recursion tree
        let count = 0;
        if (l < r) 
        {
            let m = Math.floor((l + r) / 2);
            
            // Total inversion count = left subarray count
            // + right subarray count + merge count
            
            // Left subarray count
            count += mergeSortAndCount(arr, l, m);
            
            // Right subarray count
            count += mergeSortAndCount(arr, m + 1, r);
            
            // Merge count
            count += mergeAndCount(arr, l, m, r);
        }
        return count;
    }    
    // Driver code
let arr= [2, 4, 1, 3, 5]
document.write(mergeSortAndCount(arr, 0, arr.length - 1));
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Best Time to Buy and Sell Stock:-
var maxProfit = function(prices) {
   let profit
   let maxProfit = 0  
   prices.forEach(function(buy, index) {
       let rest = prices.slice(index + 1); document.write(rest+ "---");       
       if (rest){
           let sell = Math.max(...rest)      
           sell > buy ? profit = sell - buy : null
           profit > maxProfit ? maxProfit = profit : null 
           console.log(profit)
     }     
   })  
    return maxProfit    
};
console.log(maxProfit ([7,1,5,3,6,4]))
------------------------------------
const maxProfit = function(prices) {
    let maxProfit = 0; let min = prices[0];
    let lowestPrice  = prices[0];
    for(let i = 1; i < prices.length; i++) {
        min = Math.min(prices[i], min);
        maxProfit = Math.max(maxProfit, prices[i] - min);
    }
    return maxProfit;
};
console.log(maxProfit ([7,1,5,3,6,4]))
-------------------------------------
Count pairs with given sum :-
function getPairsCount(arr, n, sum)
{
    let count = 0; // Initialize result
    for (let i = 0; i < n; i++)
        for (let j = i + 1; j < n; j++)
            if (arr[i] + arr[j] == sum){
                count++;
                console.log(arr[i], arr[j])
                }

    return count;
}
    let arr = [ 1, 5, 7, -1, 5 ];
    let n = arr.length;
    let sum = 6;
    document.write("Count of pairs is "  + getPairsCount(arr, n, sum));
    ------------------------------------
    function printPairs(arr, n, sum) {
        var m = {};
        for (var i = 0; i < n; i++) {
          var rem = sum - arr[i]; 
          if (m.hasOwnProperty(rem)) {
            var count = m[rem];
            for (var j = 0; j < count; j++) {
              document.write("(" + rem + ", " + arr[i] + ")" + "<br>");
            }
          } 
          if (m.hasOwnProperty(arr[i])) {
            m[arr[i]]++;
          } else {
            m[arr[i]] = 1;
          }
        }
      }
      var arr = [1, 5, 7, -1, 5];
      var n = arr.length;
      var sum = 6;
printPairs(arr, n, sum);
---------------------------------------
 function pairedElements(arr, sum, n) {
            var low = 0;
            var high = n - 1;
            while (low < high) {
                if (arr[low] + arr[high] == sum) {
                    document.write("The pair is : (" +
                        arr[low] + ", " +
                        arr[high] + ")<br>");
                }
                if (arr[low] + arr[high] > sum) {
                    high--;
                }
                else {
                    low++;
                }
            }
        }
        var arr = [ 2, 3, 4, -2, 6, 8, 9, 11]
        var n = arr.length;
        arr.sort(function(a,b){return a-b;});
        pairedElements(arr, 6, n);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given three arrays sorted in increasing order. Find the elements that are common in all three arrays. https://www.youtube.com/watch?v=ajWCEu1razQ
function findCommon(ar1, ar2, ar3, n1, n2, n3) 
      {
        var i = 0,j = 0,k = 0;
        while (i < n1 && j < n2 && k < n3)
        {
          if (ar1[i] == ar2[j] && ar2[j] == ar3[k])
          {
            document.write(ar1[i] + " ");
            i++;
            j++;
            k++;
          }
          else if (ar1[i] < ar2[j]) i++;
          else if (ar2[j] < ar3[k]) j++;
          else k++;
        }
      }
      var ar1 = [1, 5, 10, 20, 40, 80];
      var ar2 = [6, 7, 20, 80, 100];
      var ar3 = [3, 4, 15, 20, 30, 70, 80, 120];
      var n1 = ar1.length;
      var n2 = ar2.length;
      var n3 = ar3.length;
      document.write("Common Elements are ");
      findCommon(ar1, ar2, ar3, n1, n2, n3);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Rearrange array in alternating positive & negative items with O(1) extra space:  https://www.youtube.com/watch?v=5MeI5Kk8KTQ
    function rightrotate(arr , n , outofplace , cur) {
        var tmp = arr[cur];
        for ( var i = cur; i > outofplace; i--)
            arr[i] = arr[i - 1];
        arr[outofplace] = tmp;
    } 
    function rearrange(arr , n) {
        var outofplace = -1; 
        for (var index = 0; index < n; index++)
        {
            if (outofplace >= 0)
            {
                if ((arr[index] >= 0 && arr[outofplace] < 0) || (arr[index] < 0 && arr[outofplace] >= 0)) {
                    if (index - outofplace >= 2)
                        outofplace = outofplace + 2;
                    else
                        outofplace = -1;
                }
            }
            if (outofplace == -1) {
               if ((arr[index] <0 && index%2 == 1) || (arr[index] >= 0 && index%2 == 0))
                    outofplace = index;
            }
        }
    }
    function printArray(arr , n) {
        for (i = 0; i < n; i++)
            document.write(arr[i] + " ");
        document.write("");
    }
    var arr = [ -5, -2, 5, 2, 4, 7, 1, 8, 0, -8 ];
        var n = arr.length;
 
        document.write("Given array is ");
        printArray(arr, n);
 
        rearrange(arr, n);
 
        document.write("<br/>RearrangeD array is ");
        printArray(arr, n);
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
subArray sum equals to zero:-
const subArrayExists = (arr) => {
    const sumSet = new Set();
    // Traverse through array and store prefix sums
    let sum = 0;
    for (let i = 0 ; i < arr.length ; i++)
    {
        sum = sum + arr[i]; //0+4=4 // 4+2=6 //6+(-3)=3 //3+1=4
        document.write(arr[i] + " ")
        if (sum === 0 || sumSet.has(sum)) return true; // If prefix sum is 0 or it is already present
        sumSet.add(sum);
    }
    return false;
}
const arr = [4, 2, 0, 1, 6] //[4, 2, -3, 1, 6];
if (subArrayExists(arr))
    console.log("Found a subarray with 0 sum");
else
    console.log("No Such Sub Array Exists!");
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Factorials of large numbers
function factorialize(num) {
  if (num < 0)  return -1;
  else if (num == 0)  return 1;
  else { return (num * factorialize(num - 1)); }
}
console.log(factorialize(5));
------------------------------------------
function factorialize(num) {
  var result = num;
  if (num === 0 || num === 1) return 1; 
  while (num > 1) 
  { 
    num--;
    result *= num;
  }
  return result;
}
console.log(factorialize(5));
-----------------------------------------
function factorialize(num) {
  if (num === 0 || num === 1)
    return 1;
  for (var i = num - 1; i >= 1; i--) {
    num *= i;
  }
  return num;
}
console.log(factorialize(5));
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Maximum Product Subarray 
function productSubArray(nums) {
  let globalMaxProduct = nums[0];
  for (let i = 0; i < nums.length; i++) {
    let localMaxProduct = 1;
    for (let j = i; j < nums.length; j++) {
      localMaxProduct *= nums[j];

      if (localMaxProduct > globalMaxProduct) {
        globalMaxProduct = localMaxProduct;
      }
    }
  }
  return globalMaxProduct;
}
console.log(productSubArray([6, -3, -10, 0, 2]))
-------------------------------------------------
function productSubArray(nums) {
 if(nums == null || nums.length == 0) return 0;
 if(nums.length ==1) return nums[0];
 let maxProduct = 0;
 let currProduct = 1;
 for (let i = 0; i < nums.length; i++) {
    currProduct *= nums[i];
    maxProduct = Math.max(currProduct, maxProduct);
    if(currProduct ==0) currProduct = 1;
}
currProduct = 1;
for (let i = nums.length-1; i >=0; i--) {
    currProduct *= nums[i];
    maxProduct = Math.max(currProduct, maxProduct);
    if(currProduct ==0) currProduct = 1;
}
return maxProduct
}
console.log(productSubArray([6, -3, -10, 0, 2]))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Longest consecutive subsequence :-
   function findLongestConseqSubseq(arr, n) {
            let count = 0;
            arr.sort(function (a, b) { return a - b; })
            var v = [];
            v.push(arr[0]);
            for (let i = 1; i < n; i++) { //remove duplicate elements //or use include method
                if (arr[i] != arr[i - 1])
                    v.push(arr[i]);
            }
            console.log(v) 
            for (let i = 0; i < v.length; i++) { //main logic to find longest length
                if (v[i] - v[i - 1] == 1){
                    count++;
                    console.log(v[i])  
                    }                
            }
            return count;
        }
        let arr = [1, 9, 3, 10, 4, 20, 2]; 
        let n = arr.length;
        document.write( "Length of the Longest contiguous subsequence is " +findLongestConseqSubseq(arr, n) );
-----------------------------------------------
function findLongestConseqSubseq(arr, n) {
    let S = new Set(); let ans = 0;
    for (let i = 0; i < n; i++) S.add(arr[i]);  // Hash all the array elements
    for (let i = 0; i < n; i++)
    { 
        if (!S.has(arr[i] - 1)) //if element not present //0 // if current element is the starting element of a sequence
        {
           let j = arr[i]; //j=1//2 //3//4  // Then check for next elementsin the sequence
            while (S.has(j))
                j++; //2
            ans = Math.max(ans, j - arr[i]); 
        }
    }
    return ans;
}
let arr = [1, 9, 3, 10, 4, 20, 2];
let n = arr.length;
document.write("Length of the Longest contiguous subsequence is " + findLongestConseqSubseq(arr, n));
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
