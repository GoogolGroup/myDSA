450 questions- https://drive.google.com/file/d/1FMdN_OCfOI0iAeDlqswCiC2DZzD4nPsb/view
frequent asked quetions-https://docs.google.com/spreadsheets/d/1k6hcdNsmBPxSPqaqmUpRKqBjax1-miMaRRKcbscL3ow/edit#gid=0
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Reverse of string/ array/ number:-
var a = [1,2,3,4,5];
   a.reverse();
   document.write(a);
------------------------------------
 function customReverse(originalArray) {
  let leftIndex = 0;
  let rightIndex = originalArray.length - 1;

  while (leftIndex < rightIndex) {
    let temp = originalArray[leftIndex];
    originalArray[leftIndex] = originalArray[rightIndex];
    originalArray[rightIndex] = temp;
    leftIndex++;
    rightIndex--;
  }
}
let myArray = [1, 2, 3, 4, 5];
customReverse(myArray);
console.log(myArray);
-------------------------------------
let numbers = [1, 2, 3, 5];
let reversedNumbers = [];
for(let i = numbers.length -1; i >= 0; i--) {
  reversedNumbers.push(numbers[i]);
}
console.log(reversedNumbers);
-----------------------------------
  var t = [];
  var a = [1,2,5];
  for(var i = 0; i < a.length;i++){
   t[i] = a[a.length-1-i]
  }
  console.log(t)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find Minimum and Maximum Values in an Array:-(“[The spread] operator causes the values in the array to be expanded, or ‘spread,’ into the function’s arguments.”)
Math.min(1,3,5) // 1
Math.min([1,3,5]) // NaN
// Using the spread operator
Math.min(...[1,3,5]) // 1
Math.max(...[1,3,5]) // 5
---------------------------------
// Using Function.prototype.apply() instead of the spread operator
Math.min.apply(null, [1,3,5]) // 1(first argument to .apply() is the target for this, which in this case does not matter, so I passed in null as the first argument.)
Math.max.apply(null, [1,3,5]) // 5
----------------------------------
const arr = [1,3,53];
let minValue = arr[0]; let maxValue = arr[0];
for(var i = 1; i < arr.length; i++){
    if(arr[i] < minValue){ //3<1 //53<0
        minValue = arr[i];
    }
    if(arr[i] > maxValue){ //3>1 //53>0
        maxValue = arr[i]; //3 //53
     }
}
console.log(minValue);
console.log(maxValue); 
---------------------------
let arrayOfNumbers = [4, 12, 62, 70, -10];
console.log("Max: " + Math.max.apply(Math, arrayOfNumbers));
// output ==> Max: 70
console.log("Min: " + Math.min.apply(Math, arrayOfNumbers));
// output ==> Min: -10
----------------------------
var arr = [ 3, 8, 7, 6, 5, -4, 31, 2, 21, 20, 1 ].sort(function(a, b) { return a - b }),  // [-4, 1, 2, 3, 5, 6, 7, 8, 20, 21, 31]
    min = arr[0],  // min
    max = arr[arr.length-1];  //max
console.log(min, max);
-----------------------------
let arrayList = [1, 2, 3, 4, 3, 20, 0];
let maxNum = arrayList.reduce((prev, current) => {
  return Math.max(prev, current)
});
let minNum = arrayList.reduce((prev, current) => {
  return Math.min(prev, current)
});
console.log(minNum);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To find kth mini and max from an array:-
var numbers = [1,4,3,5,6,2];
var sorted = numbers.sort(function(a, b) { return a - b });
var smallest = sorted[0], secondSmallest = sorted[1], thirdSmallest = sorted[2],
    largest  = sorted[sorted.length - 1], secondLargest = sorted[sorted.length - 2], thirdLargest = sorted[sorted.length - 3];
console.log('Smallest: ' + smallest);
console.log('Second Smallest: ' + secondSmallest);
console.log('Third Smallest: ' + thirdSmallest);
console.log('Third Largest: ' + thirdLargest);
console.log('Second Largest: ' + secondLargest);
console.log('Largest: ' + largest);
-------------------------------
function kthSmallest(arr, k){
    arr.sort((a,b) => a-b);
    return arr[k - 1];
}
console.log(kthSmallest([ 1,2,3,4,5,6,7,8,9,10], 3));
function kthLargest(arr, k){
    arr.sort((a,b) => a-b);
    return arr[arr.length - k];
}
console.log(kthLargest([ 1,2,3,4,5,6,7,8,9,10], 3));
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an array A[] consisting 0s, 1s and 2s, write a function that sorts A[]. The functions should put all 0s first, then all 1s and all 2s in last.
	function sort012(arr)
	{
		let count0 = 0, count1 = 0, count2 = 0;
		for (let i = 0; i < arr.length; i++) {
			if (arr[i] == 0) count0++;
			if (arr[i] == 1) count1++;
			if (arr[i] == 2) count2++;
		}
		for (let i = 0; i < count0; i++)	arr[i] = 0; 
		for (let i = count0; i <(count0 + count1); i++) arr[i] = 1;
		for (let i = (count0 + count1); i < arr.length; i++)	arr[i] = 2;
    
		for (let i = 0; i < arr.length; i++)	console.log(arr[i] + " ");
	}
sort012([ 0,1, 1,0, 1, 2 ]);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Move all negative numbers to beginning and positive to end with constant extra space;-
Algorithm===>
Set the j to 0.
Traversing the array from 0 to n(exclusively, where n is array’s length).
Check if any element of an array is less than the 0,
Check if i should not be equal to j,
Swap the values of indexes arr[i] and arr[j], and increase the value of j.
Print the array.
-----------
function rearrange(arr){
    for (let i = 0, j = 0; i < arr.length; i++) 
    {
        if (arr[i] < 0) { //-1 //2 //-3 //4 //5
            if (i != j)
            { //0,0 //not // 2,1 // not,2 //
                let temp = arr[i]; //-3
                arr[i] = arr[j];
                arr[j] = temp; //arr[1]=-3 //
            }
        j++;
        }
    }
    for (let i = 0; i < arr.length; i++) document.write(arr[i] + " ");
}
rearrange([ -1, 2, -3, 4, -5, 6, -7, 8, 9 ]); //-1 -3 -5 -7 2 6 4 8 9
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To find union and intersection of the 2 sorted arrays:-
var a = [34, 35, 45, 48, 49];
var b = [48, 55];
var union = [...new Set([...a, ...b])];
console.log(union);
------------------------------
function union(a, b) {
    return a.concat(b.filter(function(el) {
        return a.indexOf(el) === -1;
    }));
}
console.log(union([1,2,3,4,5],[2,3,4,5,6,7,9]))
-------------------------------------
const arr1 = [1,2,3,4];
const arr2 = [1,2,5,6];
const intersection = arr1.filter(value=>arr2.includes(value));
console.log(intersection); // [1,2]
-----------------------------------
function printUnion( arr1,  arr2)
    {var i = 0, j = 0;
        while (i < arr1.length && j < arr2.length) { //5-0,1,2,3,4
            if (arr1[i] < arr2[j])
                document.write(arr1[i++] + " ");
            else if (arr2[j] < arr1[i])
                document.write(arr2[j++] + " ");
            else {
                document.write(arr2[j++] + " ");
                i++;
            }
        }
       while (i < arr1.length)
            document.write(arr1[i++] + " ");
        while (j < arr2.length)
            document.write(arr2[j++] + " ");
    }
  printUnion([ 1, 2, 4, 5, 6 ], [ 1, 2, 3, 5, 7 ]);
